*****************************************************
■ 2018.05.24
*****************************************************
- Arduino의 스케치를 이용하도록 수정함.
  . Munchi_A(F() 매크로 이용 X) -> 65758 Byte(25%) / 6631Byte(80%) (Code/Memory)
  . Munchi_B(F() 매크로 이용 O) -> 67486 Byte(26%) / 4165Byte(50%) (Code/Memory)

*****************************************************
■ 2006.xx.xx
*****************************************************
- 무게중심 계산에서 상체를 포함시킴. (_INCLUDE_BODY == 1 인 경우) -> 해야 한다...

*****************************************************
■ 2006.03.25
*****************************************************
- 상체의 정기구학 계산루틴를 추가했다.  (T0?_for_M2_BODY())
- 상체의 이동 위치계산 및 시리얼 통신 프로그램 추가.
- Sync_Write 명령의 Bug 발견(Check Sum과 동일한 ID를 가진 AX-12가 제어됨)
   -> Sync_Write_All 명령 추가
- mb 명령을 이용하여 상체의 Zero Position 이동 명령 추가
- 걸을 때 Sync_Write_All명령을 이용해서 움직이도록 수정
  
- mw 50 120 30 20 -50 40 으로 천천히 걸을 수 있다. 
  (배터리, CM-5 제거 후 동작시킴)

*****************************************************
■ 2006.02.23
*****************************************************
- 06.2.7의 역진자 원리를 이용한 Torque 계산은 잘못되었다.
- Debug 후 COG(무게중심)와 동일한 수식으로 동일한 값이 계산된다.

- COG가 제대로 계산이 되었는지 확인해야 한다.
- 그래서...
   . 역기구학 계산할때 회전 한계를 없앴다.
   . 역기구학을 통해서 중심을 이동하고 그때의 무게중심을 계산한다.
- Cal_COG()함수 삭제 -> Cal_Torque에서 COG까지 함께 계산함.
- Cal_Torque에서 전달 인자로 "지탱하는 발"을 넘겨주도록 수정.
- Move_Cog_Working에서 step을 "지탱하는 발"로 수정.

- "cc"명령을 이용해서 오른쪽 발을 들고 왼쪽발로 지탱하며 무게중심 계산

*****************************************************
■ 2006.02.07
*****************************************************
- 역진자 원리를 이용해서 각 발에 걸리는 Torque를 계산하였다.
- 그런데... Torque를 0으로 하도록 제어하니까 오히려 옆으로 쓰러진다.
- 왜그럴까? 가속도 성분 때문인가?
- 가속도 성분을 고려한 ZMP 또는 센서 이용을 고려해 봐야 겠다.

*****************************************************
■ 2006.02.04
*****************************************************
- 프로그램 정리... 깔끔하게?!
- printf문을 다 지웠더진 속도계산에서 30.0을 주니까 따라가지를 못한다.
  (현재 50으로 되어있다.)
- 무게중심으로는... 안정성을 판별하지 못한다.
- todo : 역진자 원리 -> ZMP

*****************************************************
■ 2006.01.31
*****************************************************
- mw 명령 추가. 보폭 지정을 통한 걸음걸이 구현
- 속도계산이... 계산과 맞지 않는다. 
  (현재 제어 주기인 23.629msec의 경우 18.55인데, 30.0정도를 주니까
   제대로 움직인다...)

*****************************************************
■ 2006.01.24
*****************************************************
- MoveBothLeg의 위치를 각 다리의 {0}좌표계에서 {6}좌표계로 주던 놈을
  {BC}좌표계에서 {F}좌표계로 주도록 변경.
- 무게중심 계산 추가.

*****************************************************
■ 2006.01.18
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!!! 드디어 첫걸음을 내딛다!!!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*****************************************************
- Inverse Kinematcis를 수정. 
  (총 4개 Solution이용, 동일한 계산을 For문을 이용하여 처리)
- 이동 명령시 동일한 시간에 움직임이 끝나도록 프로그램
  (20msec인 경우 SPEED_CONV를 조정하고, Sync_Write_LEG를 조정하여야 함)
  (지금은... 대충... 되어있다.)
- 현재 위치를 기억함.(g_LEG_Position)
- positin_ax를 모두 int형으로 고침(0 ~ 1023의 위치이므로 double일 필요 없음)
- X,Y,Z좌표를 이용한 로봇 이동(좌/우 발 동시 움직임)
- 역기구학 계산시의 제한 각도 고려
- Zero 위치를 수정(tan(14.7/79.2))

*****************************************************
■ 2006.01.16 까지의 History 정리
*****************************************************
- 정기구학, 역기구학의 해를 풀이하는 함수 작성(책에있는 방법, Case2)
- Modem을 이용한 직렬 통신 프로그램(수신은 Interrupt 방식임)
- AX-12와 통신 프로그램(PC에서 직접 Control)
- 8255를 이용한 Timr Interrupt 및 그 주기 계산

- 역기구학에서 theta 4,5를 추가로 계산하도록 수정함. 
- 역기구학의 Solution개수를 변경하기 전 Backup함.(8->4)
   (로봇 다리의 경우 총 4개의 Solution이 가능함)
   
- 추가된 Monitor 명령
	"[Monitor Command List]\r\n\r\n"
	"cf  -> Check timer interrupt Frequency \r\n"
	"wl  -> Write Led status to AX-12 register (wt [ID][0|1]) \r\n"
	"mf  -> Move Forward kinematics (mf [J1][J2][J3][J4][J5][J6]) \r\n"
	"mc  -> Moving Check (Forward->Inverse) (mc [J2][J3][J4]) \r\n"


*****************************************************
■ 2006.01.12
*****************************************************
- Header의 구조 변경
  (.h파일에는 함수 원형만, 공유 변수는 .cpp파일에, define문은 별도로 모음)

					
*****************************************************
■ 2006.01.10
*****************************************************
- Header의 구조 변경전 Backup


*****************************************************
■ 2005.12.25
*****************************************************
- AX-12 동작 명령  
- 모니터 프로그램. 여러가지 AX-12 제어를 위함.
- 모니터 프로그램에 제어를 추가.
- DOS로 프로그램을 하도록 결심함. 
     (XP에서 프로그램하고 도스창에서 실행시키니까                    )
     (inportb(g_base_addr+LSR_OFFSET)가 항상 0x60으로 읽힌다.        )
     (즉, 버퍼는 항상 쓸 수 있고, 모든 데이터는 전송되었다고 나온다. )

	"[Monitor Command List]\r\n\r\n"
	"cp  -> Check receive Packet \r\n"
	"cd  -> Check receive data Dump \r\n"
	"wt  -> WRite Torque Enable to AX-12 register (wt [ID][0|1]) \r\n"
	"rp  -> Read current Position (rp [ID])	\r\n"
	"mv  -> MoVe AX-12 to POSITION (mv [ID][POSITION][SPEED])  \r\n"
	"ESC -> Exit Program \r\n"


*****************************************************
■ 2005.11.26
*****************************************************
- AX-12 동작 명령  
- 모니터 프로그램 추가. 


*****************************************************
■ 2005.10.29
*****************************************************
- Inverse Kinematics TEST 
- Forward Kinematics를 이용하여 Inverse Kinematics의 풀이 결과를 검증


*****************************************************
■ 2005.10.26
*****************************************************
- Forward Kinematics TEST
- 정기구학의 풀이를 검증하기 위한 프로그램
- T를 계속 곱해서 계산한 결과와, 풀이에 의한 결과를 비교하여
   풀이 결과를 검증 





